function hook_stdio(e,s){var t=e.write;return e.write=function(){return function(e,t,r){s(e,t,r)}}(e.write),function(){e.write=t}}function fixture(e){return read("test/fixtures/"+e,"utf8")}var ejs=require(".."),fs=require("fs"),read=fs.readFileSync,assert=require("assert"),path=require("path"),LRU=require("lru-cache");try{fs.mkdirSync(__dirname+"/tmp")}catch(ex){if("EEXIST"!==ex.code)throw ex}var users=[];users.push({name:"geddy"}),users.push({name:"neil"}),users.push({name:"alex"}),suite("ejs.compile(str, options)",function(){test("compile to a function",function(){var e=ejs.compile("<p>yay</p>");assert.equal(e(),"<p>yay</p>")}),test("empty input works",function(){var e=ejs.compile("");assert.equal(e(),"")}),test("throw if there are syntax errors",function(){try{ejs.compile(fixture("fail.ejs"))}catch(e){assert.ok(e.message.indexOf("compiling ejs")>-1);try{ejs.compile(fixture("fail.ejs"),{filename:"fail.ejs"})}catch(e){return void assert.ok(e.message.indexOf("fail.ejs")>-1)}}throw new Error("no error reported when there should be")}),test("allow customizing delimiter local var",function(){var e;e=ejs.compile("<p><?= name ?></p>",{delimiter:"?"}),assert.equal(e({name:"geddy"}),"<p>geddy</p>"),e=ejs.compile("<p><:= name :></p>",{delimiter:":"}),assert.equal(e({name:"geddy"}),"<p>geddy</p>"),e=ejs.compile("<p><$= name $></p>",{delimiter:"$"}),assert.equal(e({name:"geddy"}),"<p>geddy</p>")}),test("default to using ejs.delimiter",function(){var e;ejs.delimiter="&",e=ejs.compile("<p><&= name &></p>"),assert.equal(e({name:"geddy"}),"<p>geddy</p>"),e=ejs.compile("<p><|= name |></p>",{delimiter:"|"}),assert.equal(e({name:"geddy"}),"<p>geddy</p>"),delete ejs.delimiter}),test("have a working client option",function(){var fn,str,preFn;fn=ejs.compile("<p><%= foo %></p>",{client:!0}),str=fn.toString(),process.env.running_under_istanbul||(eval("var preFn = "+str),assert.equal(preFn({foo:"bar"}),"<p>bar</p>"))}),test("support client mode without locals",function(){var fn,str,preFn;fn=ejs.compile('<p><%= "foo" %></p>',{client:!0}),str=fn.toString(),process.env.running_under_istanbul||(eval("var preFn = "+str),assert.equal(preFn(),"<p>foo</p>"))}),test("not include rethrow() in client mode if compileDebug is false",function(){var e=ejs.compile('<p><%= "foo" %></p>',{client:!0,compileDebug:!1});assert((e.toString().match(/rethrow/g)||[]).length<=1)})}),suite("ejs.render(str, data)",function(){test("render the template",function(){assert.equal(ejs.render("<p>yay</p>"),"<p>yay</p>")}),test("empty input works",function(){assert.equal(ejs.render(""),"")}),test("undefined renders nothing escaped",function(){assert.equal(ejs.render("<%= undefined %>"),"")}),test("undefined renders nothing raw",function(){assert.equal(ejs.render("<%- undefined %>"),"")}),test("null renders nothing escaped",function(){assert.equal(ejs.render("<%= null %>"),"")}),test("null renders nothing raw",function(){assert.equal(ejs.render("<%- null %>"),"")}),test("zero-value data item renders something escaped",function(){assert.equal(ejs.render("<%= 0 %>"),"0")}),test("zero-value data object renders something raw",function(){assert.equal(ejs.render("<%- 0 %>"),"0")}),test("accept locals",function(){assert.equal(ejs.render("<p><%= name %></p>",{name:"geddy"}),"<p>geddy</p>")}),test("accept locals without using with() {}",function(){assert.equal(ejs.render("<p><%= locals.name %></p>",{name:"geddy"},{_with:!1}),"<p>geddy</p>"),assert["throws"](function(){ejs.render("<p><%= name %></p>",{name:"geddy"},{_with:!1})},/name is not defined/)}),test("accept custom name for locals",function(){ejs.localsName="it",assert.equal(ejs.render("<p><%= it.name %></p>",{name:"geddy"},{_with:!1}),"<p>geddy</p>"),assert["throws"](function(){ejs.render("<p><%= name %></p>",{name:"geddy"},{_with:!1})},/name is not defined/),ejs.localsName="locals"}),test("support caching",function(){var e=__dirname+"/tmp/render.ejs",s={cache:!0,filename:e},t=ejs.render("<p>Old</p>",{},s),r="<p>Old</p>";assert.equal(t,r),t=ejs.render("<p>New</p>",{},s),assert.equal(t,r)}),test("support LRU caching",function(){var e,s=ejs.cache,t=__dirname+"/tmp/render.ejs",r={cache:!0,filename:t},n="<p>Old</p>";ejs.cache=LRU(),e=ejs.render("<p>Old</p>",{},r),assert.equal(e,n),e=ejs.render("<p>New</p>",{},r),assert.equal(e,n),ejs.cache=s})}),suite("ejs.renderFile(path, [data], [options], fn)",function(){test("render a file",function(e){ejs.renderFile("test/fixtures/para.ejs",function(s,t){return s?e(s):(assert.equal(t,"<p>hey</p>\n"),void e())})}),test("accept locals",function(e){var s={name:"fonebone"},t={delimiter:"$"};ejs.renderFile("test/fixtures/user.ejs",s,t,function(s,t){return s?e(s):(assert.equal(t,"<h1>fonebone</h1>\n"),void e())})}),test("accept locals without using with() {}",function(e){var s={name:"fonebone"},t={delimiter:"$",_with:!1},r=0;ejs.renderFile("test/fixtures/user-no-with.ejs",s,t,function(s,t){if(s){if(2===r)return;return r=2,e(s)}assert.equal(t,"<h1>fonebone</h1>\n"),r++,2===r&&e()}),ejs.renderFile("test/fixtures/user.ejs",s,t,function(s){if(!s){if(2===r)return;return r=2,e(new Error("error not thrown"))}r++,2===r&&e()})}),test("not catch err thrown by callback",function(e){var s={name:"fonebone"},t={delimiter:"$"},r=0,n=require("domain").create();n.on("error",function(s){assert.equal(r,1),assert.equal(s.message,"Exception in callback"),e()}),n.run(function(){process.nextTick(function(){ejs.renderFile("test/fixtures/user.ejs",s,t,function(s){if(r++,s)return assert.notEqual(s.message,"Exception in callback"),e(s);throw new Error("Exception in callback")})})})}),test("support caching",function(e){var s="<p>Old</p>",t=__dirname+"/tmp/renderFile.ejs",r={cache:!0};fs.writeFileSync(t,"<p>Old</p>"),ejs.renderFile(t,{},r,function(n,i){n&&e(n),fs.writeFileSync(t,"<p>New</p>"),assert.equal(i,s),ejs.renderFile(t,{},r,function(t,r){t&&e(t),assert.equal(r,s),e()})})})}),suite("cache specific",function(){test("`clearCache` work properly",function(){var e="<p>Old</p>",s=__dirname+"/tmp/clearCache.ejs",t={cache:!0,filename:s},r=ejs.render("<p>Old</p>",{},t);assert.equal(r,e),ejs.clearCache(),e="<p>New</p>",r=ejs.render("<p>New</p>",{},t),assert.equal(r,e)}),test("`clearCache` work properly, LRU",function(){var e,s="<p>Old</p>",t=ejs.cache,r=__dirname+"/tmp/clearCache.ejs",n={cache:!0,filename:r};ejs.cache=LRU(),e=ejs.render("<p>Old</p>",{},n),assert.equal(e,s),ejs.clearCache(),s="<p>New</p>",e=ejs.render("<p>New</p>",{},n),assert.equal(e,s),ejs.cache=t}),test("LRU with cache-size 1",function(){var e,s,t,r,n=ejs.cache;ejs.cache=LRU(1),r=__dirname+"/tmp/render1.ejs",e={cache:!0,filename:r},s=ejs.render("<p>File1</p>",{},e),t="<p>File1</p>",assert.equal(s,t),r=__dirname+"/tmp/render1.ejs",e={cache:!0,filename:r},s=ejs.render("<p>ChangedFile1</p>",{},e),t="<p>File1</p>",assert.equal(s,t),r=__dirname+"/tmp/render2.ejs",e={cache:!0,filename:r},s=ejs.render("<p>File2</p>",{},e),t="<p>File2</p>",assert.equal(s,t),r=__dirname+"/tmp/render1.ejs",e={cache:!0,filename:r},s=ejs.render("<p>ChangedFile1</p>",{},e),t="<p>ChangedFile1</p>",assert.equal(s,t),ejs.cache=n})}),suite("<%",function(){test("without semicolons",function(){assert.equal(ejs.render(fixture("no.semicolons.ejs")),fixture("no.semicolons.html"))})}),suite("<%=",function(){test("escape &amp;<script>",function(){assert.equal(ejs.render("<%= name %>",{name:"&nbsp;<script>"}),"&amp;nbsp;&lt;script&gt;")}),test("should escape '",function(){assert.equal(ejs.render("<%= name %>",{name:"The Jones's"}),"The Jones&#39;s")}),test("should escape &foo_bar;",function(){assert.equal(ejs.render("<%= name %>",{name:"&foo_bar;"}),"&amp;foo_bar;")})}),suite("<%-",function(){test("not escape",function(){assert.equal(ejs.render("<%- name %>",{name:"<script>"}),"<script>")}),test("terminate gracefully if no close tag is found",function(){try{throw ejs.compile("<h1>oops</h1><%- name ->"),new Error("Expected parse failure")}catch(e){assert.ok(e.message.indexOf("Could not find matching close tag for")>-1)}})}),suite("%>",function(){test("produce newlines",function(){assert.equal(ejs.render(fixture("newlines.ejs"),{users:users}),fixture("newlines.html"))}),test("works with `-%>` interspersed",function(){assert.equal(ejs.render(fixture("newlines.mixed.ejs"),{users:users}),fixture("newlines.mixed.html"))}),test("consecutive tags work",function(){assert.equal(ejs.render(fixture("consecutive-tags.ejs")),fixture("consecutive-tags.html"))})}),suite("-%>",function(){test("not produce newlines",function(){assert.equal(ejs.render(fixture("no.newlines.ejs"),{users:users}),fixture("no.newlines.html"))}),test("stack traces work",function(){try{ejs.render(fixture("no.newlines.error.ejs"))}catch(e){if(e.message.indexOf(">> 4| <%= qdata %>")>-1)return;throw e}throw new Error("Expected ReferenceError")})}),suite("<%%",function(){test("produce literals",function(){assert.equal(ejs.render('<%%- "foo" %>'),'<%- "foo" %>')}),test("work without an end tag",function(){assert.equal(ejs.render("<%%"),"<%"),assert.equal(ejs.render(fixture("literal.ejs"),{},{delimiter:" "}),fixture("literal.html"))})}),suite("single quotes",function(){test("not mess up the constructed function",function(){assert.equal(ejs.render(fixture("single-quote.ejs")),fixture("single-quote.html"))})}),suite("double quotes",function(){test("not mess up the constructed function",function(){assert.equal(ejs.render(fixture("double-quote.ejs")),fixture("double-quote.html"))})}),suite("backslashes",function(){test("escape",function(){assert.equal(ejs.render(fixture("backslash.ejs")),fixture("backslash.html"))})}),suite("messed up whitespace",function(){test("work",function(){assert.equal(ejs.render(fixture("messed.ejs"),{users:users}),fixture("messed.html"))})}),suite("exceptions",function(){test("produce useful stack traces",function(){try{ejs.render(fixture("error.ejs"),{},{filename:"error.ejs"})}catch(e){return assert.equal(e.path,"error.ejs"),void assert.equal(e.stack.split("\n").slice(0,8).join("\n"),fixture("error.out"))}throw new Error("no error reported when there should be")}),test("not include fancy stack info if compileDebug is false",function(){try{ejs.render(fixture("error.ejs"),{},{filename:"error.ejs",compileDebug:!1})}catch(e){return assert.ok(!e.path),void assert.notEqual(e.stack.split("\n").slice(0,8).join("\n"),fixture("error.out"))}throw new Error("no error reported when there should be")});var e=null;test("log JS source when debug is set",function(s){var t="",r=!1;e=hook_stdio(process.stdout,function(n){return t+=n,r?void 0:t.indexOf("__output")?(r=!0,e(),e=null,s()):void 0}),ejs.render(fixture("hello-world.ejs"),{},{debug:!0})}),teardown(function(){e&&(e(),e=null)})}),suite("rmWhitespace",function(){test("works",function(){assert.equal(ejs.render(fixture("rmWhitespace.ejs"),{},{rmWhitespace:!0}),fixture("rmWhitespace.html"))})}),suite("include()",function(){test("include ejs",function(){var e="test/fixtures/include-simple.ejs";assert.equal(ejs.render(fixture("include-simple.ejs"),{},{filename:e}),fixture("include-simple.html"))}),test("include ejs fails without `filename`",function(){try{ejs.render(fixture("include-simple.ejs"))}catch(e){return void assert.ok(e.message.indexOf("requires the 'filename' option")>-1)}throw new Error("expected inclusion error")}),test("strips BOM",function(){assert.equal(ejs.render('<%- include("fixtures/includes/bom.ejs") %>',{},{filename:path.join(__dirname,"f.ejs")}),"<p>This is a file with BOM.</p>\n")}),test("include ejs with locals",function(){var e="test/fixtures/include.ejs";assert.equal(ejs.render(fixture("include.ejs"),{pets:users},{filename:e,delimiter:"@"}),fixture("include.html"))}),test("include ejs with absolute path and locals",function(){var e="test/fixtures/include-abspath.ejs";assert.equal(ejs.render(fixture("include-abspath.ejs"),{dir:path.join(__dirname,"fixtures"),pets:users,path:path},{filename:e,delimiter:"@"}),fixture("include.html"))}),test("work when nested",function(){var e="test/fixtures/menu.ejs";assert.equal(ejs.render(fixture("menu.ejs"),{pets:users},{filename:e}),fixture("menu.html"))}),test("work with a variable path",function(){var e="test/fixtures/menu_var.ejs",s="includes/menu-item";assert.equal(ejs.render(fixture("menu.ejs"),{pets:users,varPath:s},{filename:e}),fixture("menu.html"))}),test("include arbitrary files as-is",function(){var e="test/fixtures/include.css.ejs";assert.equal(ejs.render(fixture("include.css.ejs"),{pets:users},{filename:e}),fixture("include.css.html"))}),test("pass compileDebug to include",function(){var e,s="test/fixtures/include.ejs";e=ejs.compile(fixture("include.ejs"),{filename:s,delimiter:"@",compileDebug:!1});try{e({foo:"asdf"})}catch(t){return assert.equal(t.message,"pets is not defined"),void assert.ok(!t.path)}throw new Error("no error reported when there should be")}),test("is dynamic",function(){fs.writeFileSync(__dirname+"/tmp/include.ejs","<p>Old</p>");var e="test/fixtures/include_cache.ejs",s={filename:e},t=ejs.compile(fixture("include_cache.ejs"),s);assert.equal(t(),"<p>Old</p>\n"),fs.writeFileSync(__dirname+"/tmp/include.ejs","<p>New</p>"),assert.equal(t(),"<p>New</p>\n")}),test("support caching",function(){fs.writeFileSync(__dirname+"/tmp/include.ejs","<p>Old</p>");var e="test/fixtures/include_cache.ejs",s={cache:!0,filename:e},t=ejs.render(fixture("include_cache.ejs"),{},s),r=fixture("include_cache.html");assert.equal(t,r),t=ejs.render(fixture("include_cache.ejs"),{},s),assert.equal(t,r),fs.writeFileSync(__dirname+"/tmp/include.ejs","<p>New</p>"),t=ejs.render(fixture("include_cache.ejs"),{},s),assert.equal(t,r)})}),suite("preprocessor include",function(){test("work",function(){var e="test/fixtures/include_preprocessor.ejs";assert.equal(ejs.render(fixture("include_preprocessor.ejs"),{pets:users},{filename:e,delimiter:"@"}),fixture("include_preprocessor.html"))}),test("fails without `filename`",function(){try{ejs.render(fixture("include_preprocessor.ejs"),{pets:users},{delimiter:"@"})}catch(e){return void assert.ok(e.message.indexOf("requires the 'filename' option")>-1)}throw new Error("expected inclusion error")}),test("strips BOM",function(){assert.equal(ejs.render("<% include fixtures/includes/bom.ejs %>",{},{filename:path.join(__dirname,"f.ejs")}),"<p>This is a file with BOM.</p>\n")}),test("work when nested",function(){var e="test/fixtures/menu_preprocessor.ejs";assert.equal(ejs.render(fixture("menu_preprocessor.ejs"),{pets:users},{filename:e}),fixture("menu_preprocessor.html"))}),test("include arbitrary files as-is",function(){var e="test/fixtures/include_preprocessor.css.ejs";assert.equal(ejs.render(fixture("include_preprocessor.css.ejs"),{pets:users},{filename:e}),fixture("include_preprocessor.css.html"))}),test("pass compileDebug to include",function(){var e,s="test/fixtures/include_preprocessor.ejs";e=ejs.compile(fixture("include_preprocessor.ejs"),{filename:s,delimiter:"@",compileDebug:!1});try{e({foo:"asdf"})}catch(t){return assert.equal(t.message,"pets is not defined"),void assert.ok(!t.path)}throw new Error("no error reported when there should be")}),test("is static",function(){fs.writeFileSync(__dirname+"/tmp/include_preprocessor.ejs","<p>Old</p>");var e="test/fixtures/include_preprocessor_cache.ejs",s={filename:e},t=ejs.compile(fixture("include_preprocessor_cache.ejs"),s);assert.equal(t(),"<p>Old</p>\n"),fs.writeFileSync(__dirname+"/tmp/include_preprocessor.ejs","<p>New</p>"),assert.equal(t(),"<p>Old</p>\n")}),test("support caching",function(){fs.writeFileSync(__dirname+"/tmp/include_preprocessor.ejs","<p>Old</p>");var e="test/fixtures/include_preprocessor_cache.ejs",s={cache:!0,filename:e},t=ejs.render(fixture("include_preprocessor_cache.ejs"),{},s),r=fixture("include_preprocessor_cache.html");assert.equal(t,r),fs.writeFileSync(__dirname+"/tmp/include_preprocessor.ejs","<p>New</p>"),t=ejs.render(fixture("include_preprocessor_cache.ejs"),{},s),assert.equal(t,r)})}),suite("comments",function(){test("fully render with comments removed",function(){assert.equal(ejs.render(fixture("comments.ejs")),fixture("comments.html"))})}),suite("require",function(){test("allow ejs templates to be required as node modules",function(){var e="test/fixtures/include_preprocessor.ejs",s=require(__dirname+"/fixtures/menu_preprocessor.ejs");process.env.running_under_istanbul||assert.equal(s({filename:e,pets:users}),fixture("menu_preprocessor.html"))})}),suite("examples",function(){function e(){}fs.readdirSync("examples").forEach(function(s){/\.js$/.test(s)&&suite(s,function(){test("doesn't throw any errors",function(){var t=hook_stdio(process.stderr,e),r=hook_stdio(process.stdout,e);try{require("../examples/"+s)}catch(n){throw r(),t(),n}r(),t()})})})});